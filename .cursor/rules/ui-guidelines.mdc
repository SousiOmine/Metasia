---
description: Avalonia UIの基本的な使い方 レイアウトパターンとコントロールスタイル インタラクション設計（ドラッグ&ドロップ、コンテキストメニュー） アニメーションとパフォーマンス最適化
globs: 
alwaysApply: false
---
# Metasia UIガイドライン

## Avalonia UI基本

### XAML構造
```xml
<UserControl xmlns="https://github.com/avaloniaui"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:vm="using:Metasia.Editor.ViewModels"
             x:Class="Metasia.Editor.Views.ExampleView"
             x:DataType="vm:ExampleViewModel">
    <!-- UIコンテンツ -->
</UserControl>
```

### データバインディング
```xml
<!-- 単純なバインディング -->
<TextBlock Text="{Binding PropertyName}"/>

<!-- 双方向バインディング -->
<TextBox Text="{Binding PropertyName, Mode=TwoWay}"/>

<!-- コマンドバインディング -->
<Button Command="{Binding SaveCommand}"/>

<!-- コンバーター使用 -->
<Border IsVisible="{Binding IsSelected, Converter={StaticResource BoolToVisibilityConverter}}"/>
```

## レイアウトパターン

### メインウィンドウ構造
[MainWindow.axaml](mdc:Metasia.Editor/Views/MainWindow.axaml)

```xml
<DockPanel>
    <!-- メニューバー -->
    <Menu DockPanel.Dock="Top">
        <!-- メニュー項目 -->
    </Menu>
    
    <!-- ツールバー -->
    <StackPanel DockPanel.Dock="Top" Orientation="Horizontal">
        <!-- ツールボタン -->
    </StackPanel>
    
    <!-- メインコンテンツ -->
    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="200"/>  <!-- 左パネル -->
            <ColumnDefinition Width="*"/>    <!-- 中央 -->
            <ColumnDefinition Width="300"/>  <!-- 右パネル -->
        </Grid.ColumnDefinitions>
        
        <!-- コンテンツ配置 -->
    </Grid>
</DockPanel>
```

### タイムラインレイアウト
[TimelineView.axaml](mdc:Metasia.Editor/Views/TimelineView.axaml)

```xml
<Grid RowDefinitions="*, 1, 50">
    <!-- タイムライン本体 -->
    <Grid Grid.Row="0" ColumnDefinitions="100,1,*">
        <!-- レイヤーボタン -->
        <ScrollViewer Grid.Column="0">
            <ItemsControl ItemsSource="{Binding LayerButtons}"/>
        </ScrollViewer>
        
        <!-- スプリッター -->
        <GridSplitter Grid.Column="1"/>
        
        <!-- クリップエリア -->
        <ScrollViewer Grid.Column="2">
            <ItemsControl ItemsSource="{Binding LayerCanvas}"/>
        </ScrollViewer>
    </Grid>
</Grid>
```

## コントロールスタイル

### ボタンスタイル
```xml
<Style Selector="Button">
    <Setter Property="Padding" Value="8,4"/>
    <Setter Property="Margin" Value="2"/>
</Style>

<Style Selector="Button:pointerover">
    <Setter Property="Background" Value="#E0E0E0"/>
</Style>

<Style Selector="Button:pressed">
    <Setter Property="Background" Value="#C0C0C0"/>
</Style>
```

### クリップビュー
[ClipView.axaml](mdc:Metasia.Editor/Views/Controls/ClipView.axaml)

```xml
<Border Background="{Binding ClipColor}"
        BorderBrush="Black"
        BorderThickness="1"
        CornerRadius="2">
    <!-- リサイズハンドル -->
    <Grid>
        <Border Name="StartHandle" Width="5" HorizontalAlignment="Left"/>
        <Border Name="EndHandle" Width="5" HorizontalAlignment="Right"/>
        <TextBlock Text="{Binding ClipName}" 
                   HorizontalAlignment="Center"
                   VerticalAlignment="Center"/>
    </Grid>
</Border>
```

## インタラクション設計

### ドラッグ&ドロップ
```csharp
// PointerPressedイベント
private void OnPointerPressed(object sender, PointerPressedEventArgs e)
{
    _startPoint = e.GetPosition(this);
    e.Pointer.Capture(this);
}

// PointerMovedイベント
private void OnPointerMoved(object sender, PointerEventArgs e)
{
    if (e.Pointer.Captured == this)
    {
        var currentPoint = e.GetPosition(this);
        // ドラッグ処理
    }
}

// PointerReleasedイベント
private void OnPointerReleased(object sender, PointerReleasedEventArgs e)
{
    e.Pointer.Capture(null);
    // 完了処理
}
```

### コンテキストメニュー
```xml
<Border>
    <Border.ContextMenu>
        <ContextMenu>
            <MenuItem Header="カット" Command="{Binding CutCommand}"/>
            <MenuItem Header="コピー" Command="{Binding CopyCommand}"/>
            <MenuItem Header="貼り付け" Command="{Binding PasteCommand}"/>
            <Separator/>
            <MenuItem Header="削除" Command="{Binding DeleteCommand}"/>
        </ContextMenu>
    </Border.ContextMenu>
</Border>
```

## カスタムコントロール

### UserControl作成
```csharp
public partial class CustomControl : UserControl
{
    public static readonly StyledProperty<string> TitleProperty =
        AvaloniaProperty.Register<CustomControl, string>(nameof(Title));

    public string Title
    {
        get => GetValue(TitleProperty);
        set => SetValue(TitleProperty, value);
    }

    public CustomControl()
    {
        InitializeComponent();
    }
}
```

### ItemsControlのカスタマイズ
```xml
<ItemsControl ItemsSource="{Binding Items}">
    <ItemsControl.ItemsPanel>
        <ItemsPanelTemplate>
            <Canvas/>
        </ItemsPanelTemplate>
    </ItemsControl.ItemsPanel>
    
    <ItemsControl.ItemContainerTheme>
        <ControlTheme TargetType="ContentPresenter">
            <Setter Property="Canvas.Left" Value="{Binding X}"/>
            <Setter Property="Canvas.Top" Value="{Binding Y}"/>
        </ControlTheme>
    </ItemsControl.ItemContainerTheme>
</ItemsControl>
```

## アニメーション

### 基本的なアニメーション
```xml
<Style Selector="Border.animated">
    <Style.Animations>
        <Animation Duration="0:0:0.3">
            <KeyFrame Cue="0%">
                <Setter Property="Opacity" Value="0"/>
            </KeyFrame>
            <KeyFrame Cue="100%">
                <Setter Property="Opacity" Value="1"/>
            </KeyFrame>
        </Animation>
    </Style.Animations>
</Style>
```

### トランジション
```xml
<Border>
    <Border.Transitions>
        <Transitions>
            <DoubleTransition Property="Opacity" Duration="0:0:0.2"/>
            <TransformOperationsTransition Property="RenderTransform" Duration="0:0:0.3"/>
        </Transitions>
    </Border.Transitions>
</Border>
```

## アクセシビリティ

### ツールチップ
```xml
<Button>
    <ToolTip.Tip>
        <StackPanel>
            <TextBlock FontWeight="Bold">再生</TextBlock>
            <TextBlock>プロジェクトを再生します (スペースキー)</TextBlock>
        </StackPanel>
    </ToolTip.Tip>
</Button>
```

### キーボードショートカット
```xml
<Window.KeyBindings>
    <KeyBinding Command="{Binding SaveCommand}" Gesture="Ctrl+S"/>
    <KeyBinding Command="{Binding UndoCommand}" Gesture="Ctrl+Z"/>
    <KeyBinding Command="{Binding RedoCommand}" Gesture="Ctrl+Y"/>
</Window.KeyBindings>
```

## パフォーマンス最適化

### 仮想化
```xml
<ListBox ItemsSource="{Binding LargeCollection}">
    <ListBox.ItemsPanel>
        <ItemsPanelTemplate>
            <VirtualizingStackPanel/>
        </ItemsPanelTemplate>
    </ListBox.ItemsPanel>
</ListBox>
```

### 遅延読み込み
```csharp
public class LazyViewModel : ViewModelBase
{
    private bool _isLoaded;
    private ObservableCollection<Item> _items;

    public ObservableCollection<Item> Items
    {
        get
        {
            if (!_isLoaded)
            {
                LoadItems();
                _isLoaded = true;
            }
            return _items;
        }
    }
}
```

## テーマとスタイリング

### ダークテーマ対応
```xml
<Application.Styles>
    <FluentTheme Mode="Dark"/>
    <StyleInclude Source="/Styles/CustomStyles.axaml"/>
</Application.Styles>
```

### カスタムカラー定義
```xml
<Application.Resources>
    <SolidColorBrush x:Key="PrimaryColor" Color="#007ACC"/>
    <SolidColorBrush x:Key="SecondaryColor" Color="#40E0D0"/>
    <SolidColorBrush x:Key="BackgroundColor" Color="#1E1E1E"/>
</Application.Resources>
```

